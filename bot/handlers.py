import asyncio
from typing import Dict, Any
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from asyncio_throttle import Throttler
from loguru import logger

from .messages import *
from .keyboards import *
from core.analyzer import topics_analyzer

# –†–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
router = Router()

# –†–µ–π—Ç-–ª–∏–º–∏—Ç–µ—Ä (1 –∑–∞–ø—Ä–æ—Å –≤ –º–∏–Ω—É—Ç—É –Ω–∞ —á–∞—Ç)
throttler = Throttler(rate_limit=1, period=60)


@router.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await message.answer(WELCOME_MESSAGE, parse_mode="Markdown")


@router.message(Command("help"))
async def cmd_help(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    await message.answer(HELP_MESSAGE, parse_mode="Markdown")


@router.message(Command("topics"))
async def cmd_topics(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /topics"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø—ã
    if message.chat.type == "private":
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.")
        return
    
    # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    args = message.text.split()
    period = args[1] if len(args) > 1 else "7d"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –ø–µ—Ä–∏–æ–¥–∞
    if period not in ["1d", "3d", "7d", "14d"]:
        await message.answer(ERROR_INVALID_PERIOD, parse_mode="Markdown")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–π—Ç-–ª–∏–º–∏—Ç
    chat_id = message.chat.id
    if not await throttler.acquire(f"chat_{chat_id}"):
        await message.answer("‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º.")
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞
    status_msg = await message.answer(ANALYZING_MESSAGES)
    
    try:
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á–∞—Ç
        result = await topics_analyzer.analyze_chat(chat_id, period)
        
        if "error" in result:
            await _handle_error(message, result)
        else:
            await _send_topics_result(message, result, period)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /topics: {e}")
        await message.answer(ERROR_UNKNOWN, parse_mode="Markdown")
    finally:
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await status_msg.delete()
        except:
            pass


@router.callback_query(F.data.startswith("regenerate:"))
async def callback_regenerate(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ'"""
    period = callback.data.split(":")[1]
    chat_id = callback.message.chat.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–π—Ç-–ª–∏–º–∏—Ç
    if not await throttler.acquire(f"chat_{chat_id}"):
        await callback.answer("‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º.", show_alert=True)
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.edit_text(ANALYZING_MESSAGES)
    
    try:
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á–∞—Ç —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π
        result = await topics_analyzer.analyze_chat(chat_id, period, force_regenerate=True)
        
        if "error" in result:
            await _handle_error_callback(callback, result)
        else:
            await _update_topics_result(callback, result, period)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–º: {e}")
        await callback.message.edit_text(ERROR_UNKNOWN, parse_mode="Markdown")


@router.callback_query(F.data.startswith("stats:"))
async def callback_stats(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É'"""
    period = callback.data.split(":")[1]
    chat_id = callback.message.chat.id
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        days = topics_analyzer.parse_period(period)
        stats = await topics_analyzer.get_chat_statistics(chat_id, days)
        
        if "error" in stats:
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", show_alert=True)
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        stats_text = f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞**

‚Ä¢ **–ù–∞–∑–≤–∞–Ω–∏–µ:** {stats.get('chat_info', {}).get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
‚Ä¢ **–¢–∏–ø:** {stats.get('chat_info', {}).get('type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
‚Ä¢ **–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:** {stats['participants_count']}
‚Ä¢ **–°–æ–æ–±—â–µ–Ω–∏–π –∑–∞ {days} –¥–Ω–µ–π:** {stats['message_count']}
‚Ä¢ **–ú–∏–Ω–∏–º—É–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:** {stats['min_required']}
‚Ä¢ **–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö:** {'‚úÖ' if stats['has_sufficient_data'] else '‚ùå'}
        """
        
        keyboard = get_stats_keyboard(period)
        await callback.message.edit_text(stats_text, parse_mode="Markdown", reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", show_alert=True)


@router.callback_query(F.data == "help")
async def callback_help(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ–º–æ—â—å'"""
    keyboard = get_help_keyboard()
    await callback.message.edit_text(HELP_MESSAGE, parse_mode="Markdown", reply_markup=keyboard)


@router.callback_query(F.data.startswith("back_to_topics:"))
async def callback_back_to_topics(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥ –∫ —Ç–µ–º–∞–º'"""
    period = callback.data.split(":")[1]
    chat_id = callback.message.chat.id
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = await topics_analyzer.analyze_chat(chat_id, period)
        
        if "error" in result:
            await callback.answer("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã", show_alert=True)
            return
        
        await _update_topics_result(callback, result, period)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Ç–µ–º–∞–º: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–º", show_alert=True)


@router.callback_query(F.data == "back")
async def callback_back(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥'"""
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é (–ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º)
    await callback.message.delete()


@router.callback_query(F.data == "cancel")
async def callback_cancel(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û—Ç–º–µ–Ω–∞'"""
    await callback.message.delete()


async def _handle_error(message: Message, result: Dict[str, Any]):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"""
    error_type = result.get("error_type")
    
    if error_type == "admin_required":
        await message.answer(ERROR_ADMIN_REQUIRED, parse_mode="Markdown")
    elif error_type == "insufficient_data":
        error_text = ERROR_INSUFFICIENT_DATA.format(
            days=result.get("message_count", 0),
            count=result.get("message_count", 0),
            min_required=result.get("min_required", 50)
        )
        await message.answer(error_text, parse_mode="Markdown")
    elif error_type == "processing_error":
        await message.answer(ERROR_PROCESSING, parse_mode="Markdown")
    else:
        await message.answer(ERROR_UNKNOWN, parse_mode="Markdown")


async def _handle_error_callback(callback: CallbackQuery, result: Dict[str, Any]):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤ callback"""
    error_type = result.get("error_type")
    
    if error_type == "admin_required":
        await callback.message.edit_text(ERROR_ADMIN_REQUIRED, parse_mode="Markdown")
    elif error_type == "insufficient_data":
        error_text = ERROR_INSUFFICIENT_DATA.format(
            days=result.get("message_count", 0),
            count=result.get("message_count", 0),
            min_required=result.get("min_required", 50)
        )
        await callback.message.edit_text(error_text, parse_mode="Markdown")
    elif error_type == "processing_error":
        await callback.message.edit_text(ERROR_PROCESSING, parse_mode="Markdown")
    else:
        await callback.message.edit_text(ERROR_UNKNOWN, parse_mode="Markdown")


async def _send_topics_result(message: Message, result: Dict[str, Any], period: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞"""
    topics = result["topics"]
    
    if not topics:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ç–µ–º–∞–º–∏
    topics_text = TOPICS_HEADER
    
    for i, topic in enumerate(topics, 1):
        topics_text += TOPIC_FORMAT.format(
            number=i,
            title=topic["title"],
            summary=topic["summary"]
        ) + "\n\n"
    
    topics_text += TOPICS_FOOTER
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    if not result.get("cached", False):
        stats_text = STATS_MESSAGE.format(
            message_count=result["message_count"],
            cluster_count=result["cluster_count"],
            processing_time=result["processing_time"],
            cached="–î–∞" if result.get("cached", False) else "–ù–µ—Ç"
        )
        topics_text += stats_text
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    keyboard = get_topics_keyboard(period)
    await message.answer(topics_text, parse_mode="Markdown", reply_markup=keyboard)


async def _update_topics_result(callback: CallbackQuery, result: Dict[str, Any], period: str):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –≤ callback"""
    topics = result["topics"]
    
    if not topics:
        await callback.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ç–µ–º–∞–º–∏
    topics_text = TOPICS_HEADER
    
    for i, topic in enumerate(topics, 1):
        topics_text += TOPIC_FORMAT.format(
            number=i,
            title=topic["title"],
            summary=topic["summary"]
        ) + "\n\n"
    
    topics_text += TOPICS_FOOTER
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    if not result.get("cached", False):
        stats_text = STATS_MESSAGE.format(
            message_count=result["message_count"],
            cluster_count=result["cluster_count"],
            processing_time=result["processing_time"],
            cached="–î–∞" if result.get("cached", False) else "–ù–µ—Ç"
        )
        topics_text += stats_text
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    keyboard = get_topics_keyboard(period)
    await callback.message.edit_text(topics_text, parse_mode="Markdown", reply_markup=keyboard)
